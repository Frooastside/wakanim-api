/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = {
  "/user": {
    /** User Profile */
    get: operations["get-user"];
  };
  "/catalogue": {
    /** Catalogue */
    get: operations["get-catalogue"];
  };
  "/catalogue/show": {
    /** Show */
    get: operations["get-show"];
  };
  "/catalogue/continuewatching": {
    /** Continue Watching */
    get: operations["get-catalogue-continuewatching"];
  };
  "/catalogue/latestepisodes": {
    /** Latest Episodes */
    get: operations["get-catalogue-latestepisodes"];
  };
  "/catalogue/latestfreeepisodes": {
    /** Latest Free Episodes */
    get: operations["get-catalogue-latestfreeepisodes"];
  };
  "/catalogue/mostpopularshows": {
    /** Most Popular Shows */
    get: operations["get-catalogue-mostpopularshows"];
  };
  "/catalogue/randomplaylist": {
    /** Random Playlist */
    get: operations["get-catalogue-randomplaylist"];
  };
  "/catalogue/episodestreamingfree": {
    /** Free Stream */
    get: operations["get-catalogue-episodestreamingfree"];
  };
  "/catalogue/episodemanifestfree": {
    /** Free Manifest */
    get: operations["get-catalogue-episodemanifestfree"];
  };
  "/catalogue/nextepisode": {
    /** Next Episode */
    post: operations["post-catalogue-nextepisode"];
  };
  "/catalogue/previousepisode": {
    /** Previous Episode */
    post: operations["post-catalogue-previousepisode"];
  };
  "/catalogue/showWithCCBundle": {
    /** Show with CC Bundle */
    get: operations["get-catalogue-showWithCCBundle?Id=416"];
  };
  "/catalogue/similarplaylist": {
    /** Similar Playlists */
    get: operations["get-catalogue-similarplaylist"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    Episode: {
      $id?: string;
      show?: components["schemas"]["Show"];
      season?: components["schemas"]["Season"];
      havePremiumDownload?: boolean;
      havePremiumStreaming?: boolean;
      subtitles?: null;
      title?: string;
      numero?: number;
      nextEpisodeId?: OneOf<[number, null]>;
      nextEpisodeActive?: OneOf<[boolean, null]>;
      previousEpisodeId?: null;
      previousEpisodeActive?: null;
      nextEpisodeTitle?: null;
      nextEpisodeImageUrl?: null;
      previousEpisodeTitle?: null;
      previousEpisodeImageUrl?: null;
      plannedBroadcastingUTC?: string;
      availableFreeStartUTC?: string;
      availableFreeEndUTC?: string;
      availablePassNoAdStartUTC?: string;
      availablePassNoAdEndUTC?: string;
      availablePremiumStartUTC?: string;
      availablePremiumEndUTC?: string;
      availableSVODStartUTC?: string;
      availableSVODEndUTC?: string;
      availableLanguages?: string;
      allowedCountries?: null;
      id?: number;
      url?: string;
      imageUrl?: string;
      rating?: number;
      active?: boolean;
      activationApproved?: boolean;
      alreadyViewed?: boolean;
      playTime?: number;
      duration?: number;
      metaDescription?: string;
      shortTitle?: string;
      metaTitle?: string;
      premiumPrice?: number;
      enableStreaming?: boolean;
      enableDownloadNoDRM?: boolean;
      episodePremiumDLMobile?: null;
      episodePremiumDL720p?: null;
      episodePremiumDL1080p?: null;
      episodePremiumStreaming?: OneOf<[null, string]>;
      episodeSVODStreaming?: OneOf<[null, string]>;
      nbActivationStreaming?: number;
      nbActivationDownload?: number;
      episodeFreeStreaming?: OneOf<[null, string]>;
      episodeNoAdStreaming?: OneOf<[null, string]>;
      episodeDLFreeSD?: null;
      episodeDLFreeHD?: null;
      endDateBought?: string;
      midRollTime?: null;
      leaps?: null;
      parsedLeaps?: (Record<string, never>)[];
      tags?: (components["schemas"]["Tag"])[];
      alreadyBought?: boolean;
      isDtrAvailable?: boolean;
      isFairplayDTRAvailable?: boolean;
      forceUseFree?: OneOf<[boolean, null]>;
      assetDuration?: number;
      assetDurationISO8601?: string;
      assetDurationLongString?: string;
      metadata?: null;
      isVisibleForEndUser?: boolean;
      nbDaysAvailableFree?: number;
      nbDaysAvailableNoAd?: number;
      haveFree?: boolean;
      progressPercentage?: number;
      haveNoAds?: boolean;
      haveSVOD?: boolean;
      havePremium?: boolean;
      wakanimEncodingVersion?: null;
      isMatureContent?: boolean;
      holdbackMinutesDL?: null;
    };
    /** Tag */
    Tag: {
      $id?: string;
      id?: number;
      name?: string;
      websiteId?: number;
      active?: boolean;
      isIcon?: boolean;
      icon?: OneOf<[null, string]>;
      tooltip?: string;
      text?: string;
    };
    Show: {
      $id?: string;
      isOnGoingShow?: string;
      seasons?: (components["schemas"]["Season"])[];
      relatedNews?: string;
      followedByUsers?: number;
      synopsis?: string;
      extendedInformation?: string;
      youtube?: string;
      author?: string;
      producer?: string;
      nextEpisodeId?: number;
      nextEpisodeToSee?: components["schemas"]["Episode"];
      progressNextEpisode?: string;
      isContinueWatching?: boolean;
      isContinueWatchingNextEpisode?: string;
      chromeCastSessionToken?: string;
      active?: boolean;
      idShowItem?: number;
      allowedCountries?: string;
      internalName?: string;
      name?: string;
      originalName?: string;
      availableOnPremiumDL?: boolean;
      availableOnPremium?: boolean;
      availableWithPassNoAd?: boolean;
      availableWithFree?: boolean;
      yearBroadcasting?: number;
      isFinishedSimulcast?: string;
      typeOfShow?: string;
      isPopularTitle?: string;
      imageUrl?: string;
      thumbnail?: string;
      metaDescription?: string;
      metaTitle?: string;
      metaType?: number;
      rating?: number;
      ratingStory?: number;
      ratingAnimation?: number;
      ratingCharacter?: number;
      ratingMusic?: number;
      nbSeasons?: number;
      seoMetaTitle?: string;
      seoMetaDescription?: string;
      seoOtherNames?: string;
      seoH1?: string;
      typeOfShowSTR?: string;
      orderOnHP?: string;
      spotLight?: string;
      spotLightEnd?: string;
      featured?: string;
      websiteId?: string;
      nbEpisodes?: number;
      followedByMe?: string;
      smallSummary?: string;
      onlyForAdmin?: string;
      copyright?: string;
      displayOnDiscover?: string;
      classification?: components["schemas"]["Classification"];
      redirectToShowItem?: string;
      redirectToSeason?: string;
      genres?: (components["schemas"]["Genre"])[];
      tags?: (string)[];
      startProduction?: string;
      availableWithSVOD?: boolean;
      availableInSVODSince?: string;
      availableInSVODUntil?: string;
      excludedCountriesList?: string;
      keywords?: string;
      friendlyName?: string;
      hideBackground?: string;
      logoUrl?: string;
    };
    Season: {
      $id?: string;
      episodes?: (components["schemas"]["Episode"])[];
      nbTotalEpisodes?: number;
      nbTotalEpisodesBought?: number;
      nbTotalToBoughtEpisodes?: number;
      percentageComplete?: number;
      truePercentageComplete?: number;
      priceForAuthenticatedUsers?: number;
      nbTotalEpisodesToReceive?: number;
      discountAppliedSeason?: number;
      name?: string;
      shortName?: string;
      isARealSeason?: boolean;
      startDate?: string;
      endDate?: string;
      premieredSeason?: number;
      premieredYear?: number;
      isCatalogue?: boolean;
      isSimulcast?: boolean;
      active?: boolean;
      idSeason?: number;
      allowToBuySeason?: boolean;
      packInformation?: null;
      isArc?: boolean;
      totalPrice?: number;
      strikedPrice?: number;
      numberEpisodes?: number;
      alreadyBought?: boolean;
      excludedCountriesList?: null;
      enableDTR?: boolean;
      dtrStartDateUtc?: string;
      dtrEndDateUtc?: string;
      isDtrAvailable?: boolean;
      dtrExcludeCountries?: null;
      adaptationType?: number;
      isMatureContent?: boolean;
      posterSeason?: null;
      startDateBroadcasting?: string;
      endDateBroadcasting?: string;
    };
    /** Classification */
    Classification: {
      $id?: string;
      idClassification?: number;
      websiteId?: number;
      ageMin?: number;
      everyone?: string;
      name?: string;
    };
    /** Genre */
    Genre: {
      $id?: string;
      name?: string;
      id?: number;
      websiteId?: string;
      active?: boolean;
      description?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {

  /** User Profile */
  "get-user": {
    responses: {
      200: {
        content: {
          "application/json": {
            $id?: string;
            public?: {
              $id?: string;
              userId?: string;
              displayName?: string;
              privacySettings?: string;
              preferedLanguage?: string;
              timezone?: number;
              enableDaylight?: boolean;
              fromWebsiteId?: number;
              validatedUser?: boolean;
              createdDate?: string;
              lastModifiedDate?: string;
              lastModifiedBy?: string;
              avatar?: string;
              twitter?: string;
              website?: string;
              facebook?: string;
              googlePlus?: string;
              status?: string;
              country?: number;
              disablePublicPage?: boolean;
              disableFromSearch?: boolean;
              disableAddFriend?: boolean;
              disableSendPrivateMessage?: boolean;
              disabledAccount?: boolean;
              lastActivityDate?: string;
              birthday?: string;
              gender?: number;
              promoCampaign?: null;
              v2_AdvertTag?: (Record<string, never>)[];
              v2_AdvertTag1?: (Record<string, never>)[];
              v2_Articles?: (Record<string, never>)[];
              v2_ArticlesRelated?: (Record<string, never>)[];
              v2_ArticlesRelated1?: (Record<string, never>)[];
              v2_BillingPlan?: (Record<string, never>)[];
              v2_BillingPlan1?: (Record<string, never>)[];
              v2_BillingSourceCard?: (Record<string, never>)[];
              v2_BillingSourceCard1?: (Record<string, never>)[];
              v2_BillingTaxRate?: (Record<string, never>)[];
              v2_BillingTaxRate1?: (Record<string, never>)[];
              v2_BillingTaxRateHistory?: (Record<string, never>)[];
              v2_BillingTaxRule?: (Record<string, never>)[];
              v2_BillingTaxRule1?: (Record<string, never>)[];
              v2_BillingTaxRuleHistory?: (Record<string, never>)[];
              v2_ContestPhysicalAddress?: (Record<string, never>)[];
              v2_Podcast_Following?: (Record<string, never>)[];
              v2_ROGroup?: (Record<string, never>)[];
              v2_ROGroup1?: (Record<string, never>)[];
              v2_ShowEpisodeItemBought?: (Record<string, never>)[];
              v2_ShowItem_Following?: (Record<string, never>)[];
              v2_SmsCode?: (Record<string, never>)[];
              v2_SmsCode1?: (Record<string, never>)[];
              v2_StripePaymentSource?: (Record<string, never>)[];
              v2_StripePaymentSource1?: (Record<string, never>)[];
              v2_UserNote?: (Record<string, never>)[];
              v2_UserNote1?: (Record<string, never>)[];
              v2_UserNote2?: (Record<string, never>)[];
              secret?: string;
            };
            accountType?: number;
            svodEndDateUtc?: null;
            trialEndDateUtc?: null;
            isSVODAvailable?: boolean;
            isTrialAvailable?: boolean;
            isoCode?: string;
            isModerator?: boolean;
            isEventPartner?: boolean;
            userHasBought?: boolean;
            notifCountUnseen?: number;
            isLocked?: boolean;
            secret?: string;
            apiLongToken?: string;
          };
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Catalogue */
  "get-catalogue": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Show"])[];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Show */
  "get-show": {
    parameters: {
      query?: {
        /** @description Show Id */
        Id?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Show"];
        };
      };
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
    };
  };
  /** Continue Watching */
  "get-catalogue-continuewatching": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Episode"])[];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Latest Episodes */
  "get-catalogue-latestepisodes": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Episode"])[];
        };
      };
    };
  };
  /** Latest Free Episodes */
  "get-catalogue-latestfreeepisodes": {
    parameters: {
      query?: {
        s?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Episode"])[];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Most Popular Shows */
  "get-catalogue-mostpopularshows": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Show"])[];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Random Playlist */
  "get-catalogue-randomplaylist": {
    parameters: {
      query?: {
        /** @description Number of random playlists */
        nbPlaylists?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ({
              $id?: string;
              name?: string;
              series?: (components["schemas"]["Show"])[];
              id?: number;
            })[];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Free Stream */
  "get-catalogue-episodestreamingfree": {
    parameters: {
      query?: {
        /** @description Episode Id */
        Id?: number;
      };
      header: {
        /** @description 2 */
        "X-Player": number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Episode"];
        };
      };
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
    };
  };
  /** Free Manifest */
  "get-catalogue-episodemanifestfree": {
    parameters: {
      query?: {
        manifest?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/dash+xml": Record<string, never>;
        };
      };
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
    };
  };
  /** Next Episode */
  "post-catalogue-nextepisode": {
    requestBody?: {
      content: {
        "application/json": {
          showId?: number;
          /** @description Current episodeId */
          episodeId?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Episode"];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Previous Episode */
  "post-catalogue-previousepisode": {
    requestBody?: {
      content: {
        "application/json": number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Episode"];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  /** Show with CC Bundle */
  "get-catalogue-showWithCCBundle?Id=416": {
    parameters: {
      query?: {
        /** @description Show Id */
        Id?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Show"];
        };
      };
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
    };
  };
  /** Similar Playlists */
  "get-catalogue-similarplaylist": {
    parameters: {
      query: {
        /** @description Number of similar Playlists */
        nbPlaylists?: number;
        /** @description Season Id */
        Id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ({
              $id?: string;
              name?: string;
              series?: (components["schemas"]["Show"])[];
              id?: number;
            })[];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
};
